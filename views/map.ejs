<!DOCTYPE html>
<html>
<head>
  <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=yes">
  <meta http-equiv="Content-type" content="text/html;charset=UTF-8">
  <title>Map with Driving Route from A to B</title>
  <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css" />
  <style type="text/css">
    .directions li span.arrow {
      display:inline-block;
      min-width:28px;
      min-height:28px;
      background-position:0px;
      background-image: url("https://heremaps.github.io/maps-api-for-javascript-examples/map-with-route-from-a-to-b/img/arrows.png");
      position:relative;
      top:8px;
    }
    .directions li span.depart  {
      background-position:-28px;
    }
    .directions li span.rightturn  {
      background-position:-224px;
    }
    .directions li span.leftturn{
      background-position:-252px;
    }
    .directions li span.arrive  {
      background-position:-1288px;
    }
    #map {
      width: 100%;
      height: 500px;
      background: grey;
    }
  </style>
  <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js"></script>
  <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js"></script>
  <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js"></script>
  <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js"></script>
</head>
<body id="markers-on-the-map">
  <div class="page-header">
    <h1>Map with Driving Route from A to B</h1>
    <p>Request a driving route from A to B and display it on the map</p>
  </div>
  <div id="map"></div>
  <div id="panel"></div>
  <script>
    function calculateRouteFromAtoB(platform) {
      var router = platform.getRoutingService(null, 8),
          routeRequestParams = {
            routingMode: 'fast',
            transportMode: 'car',
            origin: '52.5160,13.3779', // Brandenburg Gate
            destination: '52.5206,13.3862', // Friedrichstra√üe Railway Station
            return: 'polyline,turnByTurnActions,actions,instructions,travelSummary'
          };

      router.calculateRoute(
        routeRequestParams,
        onSuccess,
        onError
      );
    }

    function onSuccess(result) {
      var route = result.routes[0];

      addRouteShapeToMap(route);
      addManueversToMap(route);
      addWaypointsToPanel(route);
      addManueversToPanel(route);
      addSummaryToPanel(route);
    }

    function onError(error) {
      alert('Can\'t reach the remote server');
    }

    var mapContainer = document.getElementById('map'),
        routeInstructionsContainer = document.getElementById('panel');

    var platform = new H.service.Platform({
      apikey: '<%= apiKey %>'
    });

    var defaultLayers = platform.createDefaultLayers();

    var map = new H.Map(mapContainer,
      defaultLayers.vector.normal.map, {
      center: {lat: 52.5160, lng: 13.3779},
      zoom: 13,
      pixelRatio: window.devicePixelRatio || 1
    });

    window.addEventListener('resize', () => map.getViewPort().resize());

    var behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

    var ui = H.ui.UI.createDefault(map, defaultLayers);

    var bubble;

    function openBubble(position, text) {
      if (!bubble) {
        bubble = new H.ui.InfoBubble(
          position,
          {content: text});
        ui.addBubble(bubble);
      } else {
        bubble.setPosition(position);
        bubble.setContent(text);
        bubble.open();
      }
    }

    function addRouteShapeToMap(route) {
      route.sections.forEach((section) => {
        let linestring = H.geo.LineString.fromFlexiblePolyline(section.polyline);

        let polyline = new H.map.Polyline(linestring, {
          style: {
            lineWidth: 4,
            strokeColor: 'rgba(0, 128, 255, 0.7)'
          }
        });

        map.addObject(polyline);
        map.getViewModel().setLookAtData({
          bounds: polyline.getBoundingBox()
        });
      });
    }

    function addManueversToMap(route) {
      var svgMarkup = '<svg width="18" height="18" ' +
          'xmlns="http://www.w3.org/2000/svg">' +
          '<circle cx="8" cy="8" r="8" ' +
            'fill="#1b468d" stroke="white" stroke-width="1" />' +
          '</svg>',
          dotIcon = new H.map.Icon(svgMarkup, {anchor: {x:8, y:8}}),
          group = new H.map.Group(),
          i,
          j;

      route.sections.forEach((section) => {
        let poly = H.geo.LineString.fromFlexiblePolyline(section.polyline).getLatLngAltArray();

        let actions = section.actions;
        for (i = 0; i < actions.length; i += 1) {
          let action = actions[i];
          var marker = new H.map.Marker({
            lat: poly[action.offset * 3],
            lng: poly[action.offset * 3 + 1]},
            {icon: dotIcon});
          marker.instruction = action.instruction;
          group.addObject(marker);
        }

        group.addEventListener('tap', function (evt) {
          map.setCenter(evt.target.getGeometry());
          openBubble(evt.target.getGeometry(), evt.target.instruction);
        }, false);

        map.addObject(group);
      });
    }

    function addWaypointsToPanel(route) {
      var nodeH3 = document.createElement('h3'),
          labels = [];

      route.sections.forEach((section) => {
        labels.push(
          section.turnByTurnActions[0].nextRoad.name[0].value)
        labels.push(
          section.turnByTurnActions[section.turnByTurnActions.length - 1].currentRoad.name[0].value)
      });

      nodeH3.textContent = labels.join(' - ');
      routeInstructionsContainer.innerHTML = '';
      routeInstructionsContainer.appendChild(nodeH3);
    }

    function addSummaryToPanel(route) {
      let duration = 0,
          distance = 0;

      route.sections.forEach((section) => {
        distance += section.travelSummary.length;
        duration += section.travelSummary.duration;
      });

      var summaryDiv = document.createElement('div'),
          content = '<b>Total distance</b>: ' + distance + 'm. <br />' +
            '<b>Travel Time</b>: ' + toMMSS(duration) + ' (in current traffic)';

      summaryDiv.style.fontSize = 'small';
      summaryDiv.style.marginLeft = '5%';
      summaryDiv.style.marginRight = '5%';
      summaryDiv.innerHTML = content;
      routeInstructionsContainer.appendChild(summaryDiv);
    }

    function addManueversToPanel(route) {
      var nodeOL = document.createElement('ol');

      nodeOL.style.fontSize = 'small';
      nodeOL.style.marginLeft ='5%';
      nodeOL.style.marginRight ='5%';
      nodeOL.className = 'directions';

      route.sections.forEach((section) => {
        section.actions.forEach((action, idx) => {
          var li = document.createElement('li'),
              spanArrow = document.createElement('span'),
              spanInstruction = document.createElement('span');

          spanArrow.className = 'arrow ' + (action.direction || '') + action.action;
          spanInstruction.innerHTML = section.actions[idx].instruction;
          li.appendChild(spanArrow);
          li.appendChild(spanInstruction);

          nodeOL.appendChild(li);
        });
      });
      routeInstructionsContainer.appendChild(nodeOL);
    }

    function toMMSS(duration) {
      return Math.floor(duration / 60) + ' minutes ' + (duration % 60) + ' seconds.';
    }

    calculateRouteFromAtoB(platform);
  </script>
</body>
</html>
